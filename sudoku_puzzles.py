import numpy as np

problem3_med02 = np.array([[3, 0, 6, 5, 0, 8, 4, 0, 0],
                           [5, 2, 0, 0, 0, 0, 0, 0, 0],
                           [0, 8, 7, 0, 0, 0, 0, 3, 1],
                           [0, 0, 3, 0, 1, 0, 0, 8, 0],
                           [9, 0, 0, 8, 6, 3, 0, 0, 5],
                           [0, 5, 0, 0, 9, 0, 6, 0, 0],
                           [1, 3, 0, 0, 0, 0, 2, 5, 0],
                           [0, 0, 0, 0, 0, 0, 0, 7, 4],
                           [0, 0, 5, 2, 0, 6, 3, 0, 0]], dtype=np.int32)
problem3_easy01 = np.array([[2, 0, 0, 5, 0, 7, 0, 0, 0],
                            [0, 0, 6, 2, 3, 0, 1, 0, 0],
                            [7, 5, 3, 6, 0, 0, 0, 4, 8],
                            [0, 0, 0, 8, 0, 0, 4, 5, 1],
                            [3, 0, 0, 0, 6, 0, 9, 0, 2],
                            [0, 8, 5, 0, 2, 0, 0, 3, 0],
                            [5, 0, 1, 0, 0, 9, 0, 0, 6],
                            [0, 4, 9, 7, 0, 0, 0, 0, 3],
                            [8, 2, 7, 0, 0, 6, 0, 9, 0]], dtype=np.int32)
problem3_easy02 = np.array([[0, 1, 0, 6, 3, 0, 0, 0, 0],
                            [6, 0, 3, 2, 0, 0, 8, 5, 0],
                            [9, 0, 0, 0, 0, 0, 0, 0, 2],
                            [2, 0, 0, 1, 0, 9, 5, 0, 4],
                            [5, 0, 1, 0, 8, 0, 7, 0, 9],
                            [7, 0, 9, 5, 0, 2, 0, 0, 6],
                            [1, 0, 0, 0, 0, 0, 0, 0, 8],
                            [0, 9, 8, 0, 0, 1, 2, 0, 3],
                            [0, 0, 0, 0, 6, 8, 0, 4, 0]], dtype=np.int32)
problem3_med01 = np.array([[9, 0, 8, 5, 0, 0, 0, 4, 1],
                           [0, 5, 0, 0, 0, 4, 0, 0, 0],
                           [1, 0, 0, 0, 0, 6, 0, 0, 0],
                           [0, 1, 5, 6, 0, 8, 0, 0, 4],
                           [0, 0, 4, 0, 1, 0, 9, 0, 0],
                           [2, 0, 0, 7, 0, 5, 8, 1, 0],
                           [0, 0, 0, 3, 0, 0, 0, 0, 2],
                           [0, 0, 0, 4, 0, 0, 0, 9, 0],
                           [6, 3, 0, 0, 0, 9, 4, 0, 7]], dtype=np.int32)
problem3_hard01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 3, 7, 0, 0, 5],
                            [6, 9, 0, 0, 0, 0, 0, 2, 0],
                            [0, 0, 0, 0, 0, 0, 0, 6, 0],
                            [0, 0, 0, 0, 0, 0, 3, 4, 2],
                            [0, 0, 0, 6, 0, 9, 5, 0, 0],
                            [8, 3, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 2, 9, 0, 1, 0, 7, 0],
                            [0, 1, 4, 0, 8, 0, 0, 0, 0]], dtype=np.int32)

# This is a hard one, but it cracked - with a smart choice method.
problem3_hard02 = np.array([[5, 0, 0, 8, 0, 0, 4, 2, 0],
                            [0, 6, 0, 0, 0, 5, 0, 0, 1],
                            [0, 3, 0, 0, 2, 0, 6, 0, 0],
                            [0, 0, 3, 0, 0, 0, 0, 0, 6],
                            [0, 4, 6, 0, 0, 0, 9, 8, 0],
                            [1, 0, 0, 0, 0, 0, 5, 0, 0],
                            [0, 0, 2, 0, 1, 0, 0, 9, 0],
                            [3, 0, 0, 4, 0, 0, 0, 1, 0],
                            [0, 1, 4, 0, 0, 8, 0, 0, 5]], dtype=np.int32)

# This is a hard one, but it cracked - with a smart choice method.
problem3_hard03 = np.array([[0, 6, 9, 0, 0, 0, 0, 4, 0],
                            [3, 0, 7, 5, 2, 0, 0, 9, 0],
                            [0, 0, 0, 6, 0, 0, 2, 0, 0],
                            [0, 7, 0, 0, 6, 0, 4, 0, 0],
                            [0, 0, 2, 0, 0, 0, 8, 0, 0],
                            [0, 0, 4, 0, 1, 0, 0, 2, 0],
                            [0, 0, 3, 0, 0, 9, 0, 0, 0],
                            [0, 2, 0, 0, 4, 8, 7, 0, 9],
                            [0, 9, 0, 0, 0, 0, 5, 8, 0]], dtype=np.int32)

# This is a hard one, but it cracked - with a smart choice method.
problem3_hard04 = np.array([[6, 0, 0, 0, 9, 0, 0, 0, 2],
                            [0, 0, 8, 2, 0, 6, 0, 0, 0],
                            [9, 7, 0, 4, 0, 0, 0, 0, 0],
                            [8, 0, 0, 0, 2, 0, 3, 0, 0],
                            [0, 0, 5, 1, 0, 9, 8, 0, 0],
                            [0, 0, 1, 0, 8, 0, 0, 0, 7],
                            [0, 0, 0, 0, 0, 7, 0, 4, 1],
                            [0, 0, 0, 9, 0, 8, 2, 0, 0],
                            [3, 0, 0, 0, 1, 0, 0, 0, 9]], dtype=np.int32)

# This is a hard one, but it cracked - with a smart choice method.
problem3_classic = np.array([[8, 0, 0, 4, 0, 6, 0, 0, 3],
                             [0, 0, 9, 0, 0, 0, 0, 2, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 1],
                             [0, 0, 0, 8, 0, 0, 4, 0, 0],
                             [0, 6, 0, 0, 0, 0, 0, 1, 0],
                             [0, 0, 3, 0, 0, 2, 0, 0, 9],
                             [7, 0, 2, 0, 3, 0, 0, 0, 0],
                             [0, 4, 0, 0, 0, 0, 5, 0, 0],
                             [5, 0, 0, 7, 0, 9, 0, 0, 8]], dtype=np.int32)

# This is a hard one, but it cracked - with a smart choice method.
problem3_anti_synder = np.array([[0, 0, 0, 0, 0, 0, 0, 5, 0],
                                 [0, 9, 0, 0, 0, 0, 3, 0, 6],
                                 [2, 0, 4, 0, 0, 0, 0, 7, 0],
                                 [7, 0, 0, 3, 0, 1, 0, 0, 0],
                                 [8, 3, 0, 2, 0, 0, 0, 0, 0],
                                 [0, 2, 9, 0, 8, 6, 0, 0, 0],
                                 [0, 0, 0, 1, 0, 0, 9, 0, 0],
                                 [9, 0, 0, 7, 6, 0, 0, 4, 0],
                                 [0, 4, 0, 0, 3, 5, 6, 0, 0]], dtype=np.int32)

problem3_xwing01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [7, 6, 0, 0, 0, 3, 0, 0, 2],
                             [0, 0, 2, 6, 4, 0, 0, 0, 9],
                             [4, 0, 3, 9, 0, 0, 0, 7, 0],
                             [0, 0, 0, 0, 0, 4, 9, 0, 3],
                             [0, 0, 5, 0, 0, 0, 0, 2, 0],
                             [0, 1, 0, 5, 6, 0, 0, 0, 0],
                             [3, 7, 0, 0, 9, 0, 0, 4, 1],
                             [0, 0, 0, 0, 0, 0, 0, 6, 0]], dtype=np.int32)
problem3_xwing02 = np.array([[9, 0, 0, 0, 6, 2, 7, 0, 0],
                             [0, 0, 5, 0, 0, 3, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 6],
                             [7, 0, 0, 0, 3, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 9, 0, 0, 0],
                             [8, 0, 2, 0, 4, 5, 0, 0, 9],
                             [0, 0, 3, 5, 0, 1, 0, 2, 8],
                             [0, 4, 0, 0, 0, 0, 0, 0, 5],
                             [0, 1, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)
# Knight Sudoku - Diabolical
problem3_onedigit = np.array([[0, 0, 0, 0, 0, 5, 0, 0, 0],
							  [1, 0, 0, 0, 0, 0, 0, 7, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 2],
                              [6, 0, 4, 0, 0, 7, 0, 0, 0],
                              [0, 0, 0, 8, 0, 0, 0, 6, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 2, 0, 0, 0, 0, 0],
                              [0, 0, 0, 3, 9, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

problem3_hard01_xwing_cracked = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                          [0, 0, 0, 0, 3, 7, 0, 0, 5],
                                          [6, 9, 0, 0, 0, 0, 0, 2, 0],
                                          [0, 0, 0, 0, 0, 0, 0, 6, 0],
                                          [0, 7, 0, 0, 0, 0, 3, 4, 2],
                                          [0, 0, 0, 6, 0, 9, 5, 0, 0],
                                          [8, 3, 0, 0, 0, 0, 0, 0, 0],
                                          [0, 0, 2, 9, 0, 1, 0, 7, 0],
                                          [0, 1, 4, 0, 8, 0, 0, 0, 0]], dtype=np.int32)
problem3_shortz301 = np.array([[0, 3, 9, 5, 0, 0, 0, 0, 0],
                               [0, 0, 0, 8, 0, 0, 0, 7, 0],
                               [0, 0, 0, 0, 1, 0, 9, 0, 4],
                               [1, 0, 0, 4, 0, 0, 0, 0, 3],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 7, 0, 0, 0, 8, 6, 0],
                               [0, 0, 6, 7, 0, 8, 2, 0, 0],
                               [0, 1, 0, 0, 9, 0, 0, 0, 5],
                               [0, 0, 0, 0, 0, 1, 0, 0, 8]], dtype=np.int32)
problem3_mempham = np.array([[0, 9, 0, 7, 0, 0, 8, 6, 0],
                             [0, 3, 1, 0, 0, 5, 0, 2, 0],
                             [8, 0, 6, 0, 0, 0, 0, 0, 0],
                             [0, 0, 7, 0, 5, 0, 0, 0, 6],
                             [0, 0, 0, 3, 0, 7, 0, 0, 0],
                             [5, 0, 0, 0, 1, 0, 7, 0, 0],
                             [0, 0, 0, 0, 0, 0, 1, 0, 9],
                             [0, 2, 0, 6, 0, 0, 3, 5, 0],
                             [0, 5, 4, 0, 0, 8, 0, 7, 0]], dtype=np.int32)
problem3_sample = np.array([[0, 0, 9, 4, 7, 0, 0, 0, 2],
                            [0, 0, 0, 0, 0, 6, 0, 0, 0],
                            [0, 0, 0, 2, 1, 0, 0, 8, 0],
                            [0, 5, 1, 0, 2, 0, 0, 0, 0],
                            [0, 0, 0, 0, 8, 0, 0, 4, 0],
                            [0, 7, 4, 5, 9, 0, 3, 2, 0],
                            [0, 8, 0, 3, 0, 0, 4, 0, 0],
                            [0, 0, 6, 1, 0, 7, 2, 0, 0],
                            [2, 0, 5, 0, 0, 0, 1, 0, 3]], dtype=np.int32)
problem3_expert01 = np.array([[0, 3, 0, 0, 0, 0, 0, 0, 0],
                              [0, 4, 0, 7, 0, 0, 8, 0, 1],
                              [0, 2, 0, 0, 0, 0, 5, 0, 0],
                              [9, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 0, 0, 0, 2, 4, 7, 0, 0],
                              [3, 0, 0, 0, 6, 0, 9, 0, 8],
                              [0, 0, 0, 0, 3, 8, 0, 0, 0],
                              [0, 1, 0, 0, 0, 0, 0, 0, 6],
                              [7, 0, 0, 0, 0, 1, 0, 0, 4]], dtype=np.int32)
problem3_expert02 = np.array([[0, 0, 0, 1, 0, 2, 0, 0, 0],
                              [0, 6, 0, 0, 0, 8, 3, 0, 0],
                              [5, 0, 0, 0, 0, 0, 0, 0, 9],
                              [0, 0, 0, 4, 0, 7, 0, 0, 8],
                              [6, 8, 0, 0, 0, 5, 0, 0, 0],
                              [0, 0, 4, 0, 0, 0, 0, 1, 0],
                              [0, 2, 0, 0, 0, 0, 5, 0, 0],
                              [0, 0, 0, 0, 7, 0, 2, 0, 6],
                              [0, 9, 0, 0, 0, 6, 7, 0, 0]], dtype=np.int32)
problem3_expert03 = np.array([[0, 0, 0, 0, 4, 0, 0, 0, 0],
                              [8, 6, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 9, 7, 3, 0, 8],
                              [0, 0, 0, 6, 0, 0, 5, 2, 9],
                              [9, 0, 0, 3, 0, 0, 8, 0, 0],
                              [0, 1, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 9, 2, 0, 0, 0, 0],
                              [0, 4, 0, 0, 0, 1, 7, 0, 2],
                              [0, 0, 0, 0, 0, 0, 0, 1, 0]], dtype=np.int32)
problem3_expert04 = np.array([[8, 0, 0, 0, 0, 6, 3, 0, 5],
                              [0, 4, 0, 0, 0, 0, 0, 7, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 1, 0, 0, 3, 8, 7, 0, 4],
                              [0, 0, 0, 1, 0, 4, 0, 0, 0],
                              [3, 0, 0, 0, 7, 0, 2, 9, 0],
                              [0, 0, 0, 0, 0, 3, 0, 0, 0],
                              [0, 2, 0, 0, 0, 0, 0, 4, 0],
                              [5, 0, 6, 8, 0, 0, 0, 0, 2]], dtype=np.int32)

# Manually solved! - But not solvable as of now.
problem3_expert05 = np.array([[0, 6, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 9, 0, 0, 8],
                              [7, 0, 0, 0, 0, 0, 0, 3, 0],
                              [4, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 9, 0, 8, 0, 0, 2, 0],
                              [5, 0, 8, 4, 3, 0, 0, 0, 0],
                              [0, 1, 0, 7, 0, 0, 4, 0, 9],
                              [0, 0, 4, 0, 0, 0, 2, 0, 0],
                              [0, 0, 0, 5, 0, 8, 1, 0, 0]], dtype=np.int32)

# Dangling 2-2-2 row swordfish.
problem3_swordfish01 = np.array([[1, 6, 0, 5, 4, 0, 0, 7, 0],
                                 [0, 0, 8, 0, 0, 1, 0, 3, 0],
                                 [0, 3, 0, 8, 0, 0, 0, 0, 0],
                                 [7, 0, 0, 0, 5, 0, 0, 6, 9],
                                 [6, 0, 0, 9, 0, 2, 0, 5, 7],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 3, 0, 0, 4, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 1, 6],
                                 [0, 0, 0, 1, 6, 4, 5, 0, 0]], dtype=np.int32)

# Dangling 2-2-2 col swordfish.
problem3_swordfish04 = np.array([[5, 0, 0, 0, 6, 0, 0, 0, 3],
                                 [0, 0, 3, 8, 0, 4, 0, 0, 0],
                                 [0, 0, 0, 1, 0, 0, 0, 2, 0],
                                 [0, 2, 6, 0, 0, 0, 4, 0, 0],
                                 [3, 0, 0, 0, 2, 0, 0, 0, 6],
                                 [0, 0, 9, 0, 0, 0, 3, 5, 0],
                                 [0, 4, 0, 0, 0, 5, 0, 0, 0],
                                 [0, 0, 0, 6, 0, 1, 7, 0, 0],
                                 [1, 0, 0, 0, 7, 0, 0, 0, 9]], dtype=np.int32)

# A simple classic hard
problem3_classicHard = np.array([[3, 4, 0, 0, 0, 1, 0, 0, 0],
                                 [0, 2, 0, 0, 0, 9, 0, 0, 0],
                                 [0, 0, 0, 5, 0, 0, 0, 7, 0],
                                 [0, 0, 0, 0, 0, 3, 1, 0, 7],
                                 [6, 8, 0, 0, 0, 0, 3, 0, 2],
                                 [0, 0, 0, 0, 0, 0, 0, 6, 0],
                                 [0, 0, 8, 0, 7, 4, 0, 1, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 9, 0, 0, 0, 6, 8, 5]], dtype=np.int32)

# A simple symmetric classic hard
problem3_classicSymH = np.array([[0, 0, 1, 2, 0, 3, 4, 0, 0],
                                 [0, 0, 0, 6, 0, 7, 0, 0, 0],
                                 [5, 0, 0, 0, 0, 0, 0, 0, 3],
                                 [3, 7, 0, 0, 0, 0, 0, 8, 1],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [6, 2, 0, 0, 0, 0, 0, 3, 7],
                                 [1, 0, 0, 0, 0, 0, 0, 0, 8],
                                 [0, 0, 0, 8, 0, 5, 0, 0, 0],
                                 [0, 0, 6, 4, 0, 2, 5, 0, 0]], dtype=np.int32)

# A simple asymmetric classic hard
problem3_classicAsymH = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 6, 0, 0, 0, 0, 0],
                                  [0, 6, 0, 9, 3, 5, 0, 0, 0],
                                  [0, 0, 2, 3, 4, 0, 0, 6, 0],
                                  [3, 0, 0, 0, 0, 1, 0, 0, 2],
                                  [0, 0, 0, 0, 0, 0, 0, 8, 4],
                                  [0, 5, 0, 0, 6, 0, 0, 0, 0],
                                  [0, 0, 1, 0, 0, 2, 0, 9, 0],
                                  [8, 0, 0, 0, 0, 0, 0, 7, 1]], dtype=np.int32)

# A simple classic hard - with chain reaction triggers
problem3_classicChain = np.array([[0, 0, 4, 7, 0, 0, 9, 5, 0],
                                  [0, 0, 3, 0, 6, 5, 0, 0, 0],
                                  [7, 0, 2, 0, 0, 0, 8, 0, 0],
                                  [0, 0, 5, 0, 0, 4, 0, 9, 0],
                                  [0, 0, 0, 2, 0, 7, 0, 0, 0],
                                  [0, 9, 0, 3, 0, 0, 2, 0, 0],
                                  [0, 0, 8, 0, 0, 0, 5, 0, 9],
                                  [0, 0, 0, 5, 3, 0, 1, 0, 0],
                                  [0, 6, 9, 0, 0, 2, 7, 0, 0]], dtype=np.int32)

# A classic hard - super fiendish
problem3_classicFiend = np.array([[6, 0, 4, 0, 1, 0, 7, 0, 9],
                                  [0, 9, 0, 2, 0, 0, 0, 0, 4],
                                  [0, 0, 0, 0, 0, 0, 3, 8, 0],
                                  [0, 0, 0, 8, 5, 0, 4, 0, 1],
                                  [0, 0, 0, 1, 0, 2, 0, 0, 0],
                                  [1, 0, 9, 0, 7, 4, 0, 0, 0],
                                  [0, 1, 7, 0, 0, 0, 0, 0, 0],
                                  [4, 0, 0, 0, 0, 1, 0, 3, 0],
                                  [9, 0, 8, 0, 6, 0, 2, 0, 7]], dtype=np.int32)

# Dangling 3-2-2 col swordfish with entry 8
problem3_swordfish02 = np.array([[0, 7, 0, 0, 4, 0, 2, 0, 0],
                                 [0, 0, 0, 3, 0, 0, 0, 7, 9],
                                 [5, 0, 6, 0, 9, 0, 4, 0, 0],
                                 [0, 0, 0, 4, 0, 0, 0, 5, 0],
                                 [0, 0, 7, 0, 0, 0, 3, 0, 0],
                                 [0, 3, 0, 0, 0, 8, 0, 0, 0],
                                 [0, 0, 1, 0, 6, 0, 7, 0, 3],
                                 [7, 6, 0, 0, 0, 9, 0, 0, 0],
                                 [0, 0, 2, 0, 1, 0, 0, 8, 0]], dtype=np.int32)

# Dangling 3-2-3 col swordfish with entry 8
problem3_swordfish03 = np.array([[0, 0, 4, 7, 0, 0, 0, 0, 3],
                                 [0, 3, 0, 0, 6, 0, 0, 9, 0],
                                 [9, 0, 0, 0, 0, 1, 8, 0, 0],
                                 [8, 0, 0, 0, 0, 2, 5, 0, 0],
                                 [0, 2, 0, 0, 7, 0, 0, 8, 0],
                                 [0, 0, 1, 4, 0, 0, 0, 0, 7],
                                 [0, 0, 9, 5, 0, 0, 0, 0, 1],
                                 [0, 5, 0, 0, 1, 0, 0, 3, 0],
                                 [2, 0, 0, 0, 0, 6, 7, 0, 0]], dtype=np.int32)

# Toughone - can't solve it using snyder configuration
problem3_expert06 = np.array([[0, 0, 0, 0, 0, 0, 0, 2, 7],
                              [3, 0, 9, 0, 2, 0, 0, 0, 0],
                              [0, 0, 0, 5, 0, 0, 0, 0, 0],
                              [0, 8, 0, 0, 0, 0, 1, 7, 0],
                              [0, 5, 3, 0, 8, 1, 0, 0, 0],
                              [0, 0, 0, 0, 0, 3, 0, 0, 0],
                              [0, 0, 0, 0, 1, 0, 0, 0, 0],
                              [7, 6, 0, 0, 0, 0, 0, 0, 4],
                              [4, 0, 0, 0, 0, 9, 3, 5, 0]], dtype=np.int32)

# Toughone - can't solve it using snyder configuration
problem3_expert07 = np.array([[1, 0, 0, 0, 0, 3, 0, 0, 0],
                              [0, 9, 0, 0, 4, 5, 7, 6, 0],
                              [0, 0, 0, 0, 0, 0, 9, 0, 0],
                              [0, 0, 0, 9, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 0, 4, 2, 5],
                              [7, 0, 3, 6, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 1],
                              [0, 0, 8, 0, 0, 0, 2, 0, 0],
                              [0, 5, 6, 0, 8, 0, 0, 0, 0]], dtype=np.int32)

# Diabolical - needs advanced methods like colouring, alternating inference chain, etc.,
# to even start cracking the puzzle! - Needs bifurcation as an alternative.
problem3_expert08 = np.array([[0, 0, 0, 6, 0, 5, 3, 0, 2],
                              [0, 0, 6, 0, 3, 0, 9, 5, 0],
                              [0, 8, 0, 0, 0, 9, 6, 7, 0],
                              [0, 0, 0, 1, 0, 7, 8, 6, 0],
                              [6, 7, 8, 0, 0, 0, 1, 9, 5],
                              [0, 0, 1, 0, 6, 8, 2, 0, 7],
                              [0, 5, 4, 0, 0, 6, 7, 0, 0],
                              [0, 6, 2, 0, 0, 0, 0, 0, 0],
                              [8, 1, 0, 0, 0, 0, 0, 0, 6]], dtype=np.int32)

# Diabolical - needs quadruples, and y wings to solve.
# also has a B.U.G feature at the end
problem3_expert09 = np.array([[0, 0, 0, 0, 6, 3, 8, 0, 7],
                              [7, 0, 0, 0, 0, 5, 0, 0, 3],
                              [0, 0, 0, 0, 4, 0, 0, 0, 0],
                              [8, 0, 0, 0, 5, 2, 0, 1, 0],
                              [4, 5, 0, 0, 0, 0, 0, 9, 2],
                              [0, 7, 0, 6, 3, 0, 0, 0, 5],
                              [0, 0, 0, 0, 8, 0, 0, 0, 0],
                              [6, 0, 0, 2, 0, 0, 0, 0, 8],
                              [2, 0, 9, 0, 1, 0, 0, 0, 0]], dtype=np.int32)

# Classic Devilish Diabolical - Devised by Finnish Mathematician Dr. Arto Inkala
problem3_expert10 = np.array([[8, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 3, 6, 0, 0, 0, 0, 0],
                              [0, 7, 0, 0, 9, 0, 2, 0, 0],
                              [0, 5, 0, 0, 0, 7, 0, 0, 0],
                              [0, 0, 0, 0, 4, 5, 7, 0, 0],
                              [0, 0, 0, 1, 0, 0, 0, 3, 0],
                              [0, 0, 1, 0, 0, 0, 0, 6, 8],
                              [0, 0, 8, 5, 0, 0, 0, 1, 0],
                              [0, 9, 0, 0, 0, 0, 4, 0, 0]], dtype=np.int32)

# Classic counter-intuitive - Devised to break brute-force solvers - but easy to solve
# using logics
problem3_expert11 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 3, 0, 8, 5],
                              [0, 0, 1, 0, 2, 0, 0, 0, 0],
                              [0, 0, 0, 5, 0, 7, 0, 0, 0],
                              [0, 0, 4, 0, 0, 0, 1, 0, 0],
                              [0, 9, 0, 0, 0, 0, 0, 0, 0],
                              [5, 0, 0, 0, 0, 0, 0, 7, 3],
                              [0, 0, 2, 0, 1, 0, 0, 0, 0],
                              [0, 0, 0, 0, 4, 0, 0, 0, 9]], dtype=np.int32)

# A toughone for logics!
problem3_expert12 = np.array([[0, 0, 0, 0, 0, 6, 0, 0, 0],
                              [0, 5, 9, 0, 0, 0, 0, 0, 8],
                              [2, 0, 0, 0, 0, 8, 0, 0, 0],
                              [0, 4, 5, 0, 0, 0, 0, 0, 0],
                              [0, 0, 3, 0, 0, 0, 0, 0, 0],
                              [0, 0, 6, 0, 0, 3, 0, 5, 4],
                              [0, 0, 0, 3, 2, 5, 0, 0, 6],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Queen sudoku - 9 is the queen
problem3_chess_qn01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 2, 1, 3, 0, 0, 0],
                                [0, 0, 1, 0, 0, 0, 4, 0, 0],
                                [0, 8, 0, 0, 0, 0, 0, 3, 0],
                                [0, 6, 0, 0, 2, 0, 0, 1, 0],
                                [0, 4, 0, 0, 0, 5, 0, 2, 0],
                                [0, 0, 7, 0, 0, 0, 1, 0, 0],
                                [0, 0, 0, 3, 4, 8, 0, 6, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Queen sudoku - 9 is the queen
problem3_chess_qn02 = np.array([[2, 0, 7, 0, 0, 0, 4, 0, 5],
                                [0, 5, 0, 8, 0, 7, 0, 2, 0],
                                [4, 0, 0, 0, 2, 0, 0, 0, 7],
                                [0, 0, 3, 0, 0, 0, 2, 0, 0],
                                [0, 4, 0, 1, 0, 2, 0, 8, 0],
                                [0, 0, 2, 0, 0, 0, 5, 0, 0],
                                [3, 0, 0, 0, 6, 0, 0, 0, 2],
                                [0, 2, 0, 3, 0, 1, 0, 5, 0],
                                [7, 0, 8, 0, 0, 0, 1, 0, 6]], dtype=np.int32)

# Queen sudoku - 9 is the queen
problem3_chess_qn03 = np.array([[0, 0, 0, 0, 0, 0, 3, 0, 1],
                                [0, 0, 4, 7, 0, 8, 9, 0, 0],
                                [0, 1, 0, 0, 3, 0, 0, 2, 0],
                                [0, 9, 0, 0, 6, 0, 0, 4, 0],
                                [0, 0, 5, 4, 0, 2, 1, 0, 0],
                                [0, 2, 0, 0, 8, 0, 0, 7, 0],
                                [0, 7, 0, 0, 5, 0, 0, 1, 0],
                                [0, 0, 3, 2, 0, 7, 5, 0, 0],
                                [5, 0, 2, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Classic grading! put a number between 1 to 7 in the central cell
# 1 - easy, 7 - most difficult, 8 - multiple solutions, 9 - no solution/invalid
problem3_miracle1 = np.array([[8, 4, 0, 5, 0, 6, 0, 7, 3],
                              [6, 0, 0, 7, 0, 8, 0, 0, 2],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [3, 1, 0, 0, 0, 0, 0, 2, 4],
                              [0, 0, 0, 0, 7, 0, 0, 0, 0],
                              [2, 8, 0, 0, 0, 0, 0, 6, 5],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 0, 0, 8, 0, 3, 0, 0, 7],
                              [7, 5, 0, 4, 0, 1, 0, 8, 6]], dtype=np.int32)

problem3_diagonal_test = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 4, 0, 0, 0, 3, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Toughone - diagonal
problem3_diagonal01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [1, 0, 0, 0, 7, 9, 6, 0, 0],
                                [2, 0, 0, 0, 0, 0, 0, 3, 0],
                                [3, 0, 0, 0, 0, 0, 0, 1, 0],
                                [0, 4, 0, 0, 0, 0, 0, 2, 0],
                                [0, 5, 0, 0, 0, 0, 0, 0, 7],
                                [0, 6, 0, 0, 0, 0, 0, 0, 2],
                                [0, 0, 7, 8, 9, 0, 0, 0, 5],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Toughone - diagonal
problem3_diagonal02 = np.array([[0, 3, 0, 0, 0, 0, 0, 9, 0],
                                [0, 0, 0, 9, 0, 2, 0, 3, 0],
                                [0, 0, 0, 0, 0, 0, 0, 5, 0],
                                [0, 0, 0, 0, 0, 0, 0, 6, 0],
                                [5, 0, 0, 0, 0, 8, 4, 0, 0],
                                [0, 1, 0, 0, 0, 5, 0, 0, 0],
                                [3, 0, 1, 4, 6, 0, 9, 0, 5],
                                [0, 0, 0, 2, 0, 0, 0, 0, 0],
                                [0, 0, 4, 5, 9, 3, 0, 0, 1]], dtype=np.int32)

# Medium one - diagonal
problem3_diagonal03 = np.array([[0, 0, 0, 0, 3, 0, 0, 0, 0],
                                [3, 0, 8, 0, 0, 6, 0, 5, 0],
                                [0, 2, 0, 0, 5, 0, 0, 0, 0],
                                [0, 0, 0, 5, 2, 0, 8, 0, 1],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [5, 0, 6, 0, 1, 7, 0, 0, 0],
                                [0, 0, 0, 0, 8, 0, 0, 7, 0],
                                [0, 1, 0, 7, 0, 0, 4, 0, 9],
                                [0, 0, 0, 0, 4, 0, 0, 0, 0]], dtype=np.int32)

# Very hard one - diagonal
problem3_diagonal04 = np.array([[0, 4, 0, 0, 0, 0, 0, 3, 0],
                                [0, 0, 0, 0, 3, 0, 0, 0, 0],
                                [0, 1, 0, 5, 0, 9, 0, 6, 0],
                                [6, 0, 0, 0, 0, 0, 0, 0, 1],
                                [0, 0, 0, 2, 0, 7, 0, 0, 0],
                                [9, 0, 0, 0, 0, 0, 0, 0, 4],
                                [0, 2, 0, 1, 0, 4, 0, 5, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 8, 0, 0, 0, 0, 0, 9, 0]], dtype=np.int32)

# Classic diagonal
problem3_diagonal05 = np.array([[0, 5, 8, 1, 0, 0, 7, 0, 0],
                                [1, 0, 0, 0, 7, 0, 0, 0, 6],
                                [3, 0, 0, 0, 8, 0, 1, 0, 4],
                                [4, 0, 0, 8, 0, 0, 6, 0, 0],
                                [0, 0, 1, 0, 0, 0, 2, 0, 0],
                                [0, 0, 5, 0, 0, 1, 0, 0, 8],
                                [5, 0, 9, 0, 1, 0, 0, 0, 2],
                                [7, 0, 0, 0, 5, 0, 0, 0, 1],
                                [0, 0, 3, 0, 0, 7, 8, 6, 0]], dtype=np.int32)

# Classic Chess - Odd Knight Even Queen
problem3_chess_oddKnightEvenQN = np.array([[0, 0, 0, 9, 0, 4, 0, 0, 0],
                                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                           [0, 2, 4, 0, 0, 0, 6, 1, 0],
                                           [0, 0, 0, 1, 0, 3, 0, 0, 0],
                                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                           [0, 0, 0, 7, 0, 5, 0, 0, 0],
                                           [0, 4, 2, 0, 0, 0, 3, 6, 0],
                                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                           [0, 0, 0, 3, 0, 1, 0, 0, 0]], dtype=np.int32)

# elegant classical Extreme Diabolical Symmetrc Sudoku
# 2-3-3 column swordfish, 7 xwing on rows, two empty rectangle
# two cross-subgrid bent dangling triplet reduction
# there were skycrapers, finned xwings, y wings.
problem3_classicEDSS = np.array([[1, 0, 0, 4, 0, 0, 7, 0, 0],
                                 [0, 2, 0, 0, 5, 0, 0, 8, 0],
                                 [0, 0, 3, 0, 0, 6, 0, 0, 9],
                                 [0, 1, 0, 0, 4, 0, 0, 7, 0],
                                 [0, 0, 2, 0, 0, 5, 0, 0, 8],
                                 [9, 0, 0, 3, 0, 0, 6, 0, 0],
                                 [7, 0, 0, 0, 0, 8, 0, 0, 2],
                                 [8, 0, 0, 2, 0, 0, 9, 0, 0],
                                 [0, 9, 0, 0, 7, 0, 0, 1, 0]], dtype=np.int32)

# Toughone - JellyFish, Y wing, X wing, Block Interaction, Skyscraper
problem3_classicJFSK = np.array([[8, 0, 0, 0, 6, 0, 0, 0, 9],
                                 [0, 2, 0, 0, 4, 0, 0, 8, 0],
                                 [0, 0, 0, 1, 0, 9, 0, 0, 0],
                                 [0, 0, 1, 0, 0, 0, 4, 0, 0],
                                 [4, 6, 0, 0, 0, 0, 0, 0, 5],
                                 [0, 0, 5, 0, 9, 0, 6, 0, 0],
                                 [0, 0, 9, 5, 0, 6, 8, 0, 0],
                                 [0, 7, 0, 0, 2, 0, 0, 9, 0],
                                 [2, 0, 0, 0, 1, 0, 0, 0, 7]], dtype=np.int32)

# Toughone - Diabolic Genius - antiknight, antiking, nonconsec
problem3_chess_miracle01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 1, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 2, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Toughone - Diabolic Genius - antiknight, antiking, nonconsec
problem3_chess_miracle02 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 4, 0, 0, 0, 0],
                                     [0, 0, 3, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Toughone - Diabolic Genius - Magnificent and Symmetric
problem3_classicDGMS = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 4, 0, 0, 6, 0, 0, 2, 0],
                                 [7, 6, 0, 0, 4, 0, 0, 9, 5],
                                 [0, 0, 0, 5, 0, 3, 0, 0, 0],
                                 [2, 1, 0, 0, 0, 0, 0, 4, 8],
                                 [0, 0, 0, 4, 0, 8, 0, 0, 0],
                                 [4, 2, 0, 0, 7, 0, 0, 1, 9],
                                 [0, 9, 0, 0, 3, 0, 0, 7, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Extreme - needs x wing, y wing, skyscrapers, and really hard logics.
problem3_expert_xys = np.array([[0, 0, 0, 6, 0, 7, 0, 0, 4],
                                [0, 7, 0, 0, 9, 0, 0, 1, 0],
                                [4, 0, 0, 0, 1, 0, 0, 0, 6],
                                [6, 0, 0, 0, 5, 0, 8, 0, 0],
                                [3, 1, 0, 0, 0, 0, 0, 5, 2],
                                [0, 0, 8, 0, 4, 0, 0, 0, 3],
                                [2, 0, 0, 0, 6, 0, 0, 0, 0],
                                [0, 6, 0, 0, 8, 0, 0, 0, 0],
                                [5, 0, 0, 2, 0, 4, 0, 0, 0]], dtype=np.int32)

problem3_worldsMostDifficult = np.array([[1, 0, 0, 0, 0, 7, 0, 9, 0],
                                         [0, 3, 0, 0, 2, 0, 0, 0, 8],
                                         [0, 0, 9, 6, 0, 0, 5, 0, 0],
                                         [0, 0, 5, 3, 0, 0, 9, 0, 0],
                                         [0, 1, 0, 0, 8, 0, 0, 0, 2],
                                         [6, 0, 0, 0, 0, 4, 0, 0, 0],
                                         [3, 0, 0, 0, 0, 0, 0, 1, 0],
                                         [0, 4, 0, 0, 0, 0, 0, 0, 7],
                                         [0, 0, 7, 0, 0, 0, 3, 0, 0]], dtype=np.int32)

problem3_CTC_L34 = np.array([[1, 0, 8, 2, 3, 0, 0, 0, 4],
                             [0, 5, 0, 0, 0, 0, 0, 8, 0],
                             [0, 0, 9, 0, 0, 6, 3, 0, 0],
                             [0, 0, 0, 3, 0, 4, 1, 0, 0],
                             [2, 0, 0, 0, 6, 0, 0, 4, 3],
                             [0, 0, 4, 1, 0, 7, 0, 0, 2],
                             [0, 0, 0, 6, 0, 0, 5, 0, 0],
                             [0, 8, 0, 0, 0, 0, 0, 9, 0],
                             [9, 0, 5, 0, 1, 2, 0, 0, 7]], dtype=np.int32)

# Anti-Knight's move chess problem
problem3_chess_kn01 = np.array([[0, 1, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 2, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 3, 0, 0, 0, 0, 0],
                                [1, 0, 0, 0, 4, 0, 0, 0, 0],
                                [0, 7, 0, 0, 0, 5, 0, 0, 0],
                                [0, 0, 8, 0, 0, 0, 6, 0, 0],
                                [0, 0, 0, 4, 0, 0, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [9, 0, 7, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Anti-Knight's move chess problem - Sample 2
problem3_chess_kn02 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 2, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 3, 0, 8, 0, 2, 0],
                                [0, 0, 1, 0, 9, 0, 8, 0, 0],
                                [0, 0, 0, 4, 0, 7, 0, 0, 0],
                                [0, 0, 5, 0, 3, 0, 9, 0, 0],
                                [0, 5, 0, 7, 0, 3, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 7, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Anti-Knight's move chess problem - Sample 3
problem3_chess_kn03 = np.array([[0, 0, 0, 0, 1, 0, 0, 0, 0],
                                [0, 0, 0, 3, 0, 2, 0, 0, 0],
                                [0, 0, 9, 0, 0, 0, 3, 0, 0],
                                [0, 2, 0, 0, 0, 0, 0, 4, 0],
                                [3, 0, 0, 0, 0, 0, 0, 0, 5],
                                [0, 4, 0, 0, 0, 0, 0, 6, 0],
                                [0, 0, 4, 0, 0, 0, 7, 0, 0],
                                [0, 0, 0, 1, 0, 8, 0, 0, 0],
                                [0, 0, 0, 0, 9, 0, 0, 0, 0]], dtype=np.int32)

# Non-consecutive anti-knight's move chess 
problem3_chess_kn04 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 4, 0, 7, 0, 0, 0],
                                [0, 0, 6, 0, 0, 0, 5, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 4, 0, 0, 0, 3, 0, 0],
                                [0, 0, 0, 2, 0, 5, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Anti-knight's move chess 
problem3_chess_kn06 = np.array([[0, 0, 3, 6, 0, 8, 1, 0, 0],
                                [0, 4, 0, 0, 0, 0, 0, 7, 0],
                                [2, 0, 0, 0, 0, 0, 0, 0, 3],
                                [6, 0, 0, 0, 9, 0, 0, 0, 8],
                                [0, 0, 0, 1, 0, 2, 0, 0, 0],
                                [7, 0, 0, 0, 6, 0, 0, 0, 4],
                                [4, 0, 0, 0, 0, 0, 0, 0, 1],
                                [0, 6, 0, 0, 0, 0, 0, 2, 0],
                                [0, 0, 5, 4, 0, 9, 8, 0, 0]], dtype=np.int32)

# Fancy anti-knight's move chess sudoku - "order 66" 
problem3_chess_order66 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 5, 3, 2, 0, 0, 0, 0, 0],
                                   [0, 9, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 6, 7, 4, 0, 8, 9, 5, 0],
                                   [0, 1, 0, 7, 0, 9, 0, 0, 0],
                                   [0, 8, 9, 6, 0, 5, 7, 4, 0],
                                   [0, 0, 0, 0, 0, 7, 0, 9, 0],
                                   [0, 0, 0, 0, 0, 2, 8, 6, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# classic anti-knight's move chess 
problem3_chess_kn05 = np.array([[7, 0, 0, 2, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 6, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 3, 0, 0, 0, 0, 0, 8, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [9, 5, 0, 0, 0, 0, 0, 4, 3],
                                [3, 0, 0, 0, 0, 0, 0, 9, 8],
                                [0, 0, 1, 0, 0, 0, 2, 0, 0],
                                [5, 0, 0, 7, 0, 8, 0, 0, 4]], dtype=np.int32)

# Simple Anti-King's move chess 
problem3_chess_antiking01 = np.array([[9, 0, 0, 0, 0, 0, 0, 0, 5],
                                      [0, 0, 7, 9, 0, 1, 4, 2, 0],
                                      [0, 8, 0, 0, 0, 0, 0, 1, 0],
                                      [0, 2, 0, 0, 7, 0, 0, 3, 0],
                                      [0, 0, 0, 6, 0, 4, 0, 0, 0],
                                      [0, 3, 0, 0, 2, 0, 0, 7, 0],
                                      [0, 5, 0, 0, 0, 0, 0, 9, 0],
                                      [0, 0, 9, 5, 0, 6, 2, 0, 0],
                                      [1, 0, 0, 0, 0, 0, 0, 0, 6]], dtype=np.int32)

# Chess triple - antiknight or antiking or 9-queen digit 
problem3_chess_tripleKKQC = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 6, 0, 0, 0, 0, 0, 0, 4],
                                      [3, 5, 1, 4, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 8, 6, 5, 9, 2],
                                      [6, 0, 0, 0, 0, 0, 7, 4, 1],
                                      [0, 0, 2, 0, 0, 0, 8, 0, 0],
                                      [0, 7, 0, 0, 0, 0, 0, 0, 0],
                                      [8, 0, 0, 0, 2, 0, 4, 0, 7],
                                      [0, 0, 0, 0, 0, 0, 0, 5, 8]], dtype=np.int32)

# Multiple queens - Lascivious Queens - 4-9 are queens
problem3_chess_multiQueen = np.array([[9, 0, 0, 0, 0, 0, 0, 0, 1],
                                      [0, 0, 0, 0, 9, 0, 2, 0, 0],
                                      [0, 0, 7, 0, 1, 0, 9, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [5, 0, 0, 4, 0, 3, 0, 2, 0],
                                      [0, 0, 5, 0, 0, 1, 8, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [3, 0, 0, 0, 0, 0, 0, 0, 5]], dtype=np.int32)

# Simple Anti-King's move chess - Digits of PI
# needs Gear 3 for doublet and triplet row/col blocker interactions
problem3_chess_antiking02 = np.array([[0, 0, 0, 4, 3, 1, 0, 0, 0],
                                      [0, 0, 8, 0, 0, 0, 4, 0, 0],
                                      [0, 3, 0, 0, 0, 0, 0, 1, 0],
                                      [2, 0, 0, 0, 0, 0, 0, 0, 5],
                                      [3, 0, 0, 0, 6, 0, 0, 0, 9],
                                      [9, 0, 0, 0, 0, 0, 0, 0, 2],
                                      [0, 7, 0, 0, 0, 0, 0, 6, 0],
                                      [0, 0, 9, 0, 0, 0, 5, 0, 0],
                                      [0, 0, 0, 8, 5, 3, 0, 0, 0]], dtype=np.int32)

# Special - Chess Knight, two diagonals, and centre 3x3 magic square - filled.
problem3_4numbers_ms = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [3, 8, 4, 6, 7, 2, 0, 0, 0],
                                 [0, 0, 0, 1, 5, 9, 0, 0, 0],
                                 [0, 0, 0, 8, 3, 4, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 2]], dtype=np.int32)

# Special - Chess Knight, two diagonals, and centre 3x3 magic square - ms - not filled.
problem3_4numbers01 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [3, 8, 4, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 2]], dtype=np.int32)

# Special - Chess Knight, Chess King, and subgrid centre 3x3 magic square - ms - not filled.
problem3_4numbers02 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 2, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 4, 0, 0, 0, 0, 0]], dtype=np.int32)

# special - twin magic squares - odd diagonals
problem3_twinMSOddD = np.array([[0, 0, 0, 1, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [8, 0, 0, 0, 0, 0, 0, 6, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 3, 0, 0, 0, 0]], dtype=np.int32)

# classic windoku
problem3_windoku01 = np.array([[0, 0, 0, 7, 0, 2, 0, 0, 0],
                               [0, 0, 3, 0, 0, 0, 4, 0, 0],
                               [0, 5, 0, 0, 0, 0, 0, 1, 0],
                               [4, 0, 0, 6, 0, 7, 0, 0, 5],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 8, 0, 9, 0, 0, 4],
                               [0, 4, 0, 0, 0, 0, 0, 3, 0],
                               [0, 0, 7, 0, 0, 0, 5, 0, 0],
                               [0, 0, 0, 3, 0, 8, 0, 0, 0]], dtype=np.int32)

# classic windoku
problem3_windoku02 = np.array([[5, 0, 0, 0, 0, 0, 2, 0, 0],
                               [0, 0, 0, 4, 0, 0, 0, 3, 0],
                               [0, 0, 0, 0, 5, 6, 0, 0, 1],
                               [0, 2, 0, 0, 0, 0, 7, 0, 0],
                               [0, 0, 3, 0, 0, 0, 8, 0, 0],
                               [0, 0, 4, 0, 0, 0, 0, 9, 0],
                               [1, 0, 0, 5, 6, 0, 0, 0, 0],
                               [0, 8, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 9, 0, 0, 0, 0, 0, 6]], dtype=np.int32)

# classic windoku
problem3_windoku03 = np.array([[6, 0, 0, 3, 0, 0, 8, 0, 0],
                               [0, 0, 0, 0, 1, 2, 0, 0, 0],
                               [0, 0, 7, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 3, 0, 9, 0, 0],
                               [0, 0, 0, 4, 9, 0, 0, 0, 0],
                               [0, 0, 9, 7, 0, 0, 0, 0, 0],
                               [5, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 4, 0, 0, 0, 7, 0, 0],
                               [0, 8, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# anti-knight, centre magic square, second diagonal 7-digit thermometer
problem3_aadTribute = np.array([[2, 0, 0, 0, 0, 0, 0, 0, 5],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [8, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 2],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [5, 0, 0, 0, 0, 0, 0, 0, 8]], dtype=np.int32)

# anti-knight, centre magic square, second diagonal 7-digit thermometer
problem3_aadTribute02 = np.array([[0, 0, 0, 0, 0, 0, 0, 9, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 5, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [4, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# antiknight classic - from chess sudoku by cracking the cryptic
problem3_antiknightC1 = np.array([[0, 2, 0, 1, 0, 0, 0, 0, 0],
                                  [0, 6, 0, 0, 0, 0, 1, 4, 9],
                                  [0, 3, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 1, 0, 0, 0, 5],
                                  [0, 0, 0, 3, 7, 2, 0, 0, 0],
                                  [4, 0, 0, 0, 6, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 2, 0],
                                  [3, 8, 6, 0, 0, 0, 0, 5, 0],
                                  [0, 0, 0, 0, 0, 8, 0, 9, 0]], dtype=np.int32)

# Classic + 4 thermometers + sudoku grand prix 2020
problem3_4therm2020 = np.array([[0, 4, 0, 0, 0, 0, 0, 1, 0],
                                [2, 0, 0, 0, 0, 0, 0, 0, 6],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [9, 0, 0, 0, 0, 0, 0, 0, 2],
                                [0, 1, 0, 0, 0, 0, 0, 9, 0]], dtype=np.int32)

# Classic zero array for checking and + 0 entry puzzles
problem3_ZeroEntry = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# Classic Byjus sample checking and + 0 entry puzzles
problem3_sample02 = np.array([[0, 0, 0, 6, 0, 0, 4, 0, 0],
                              [7, 0, 0, 0, 0, 3, 6, 0, 0],
                              [0, 0, 0, 0, 9, 1, 0, 8, 0],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 5, 0, 1, 8, 0, 0, 0, 3],
                              [0, 0, 0, 3, 0, 6, 0, 4, 5],
                              [0, 4, 0, 2, 0, 0, 0, 6, 0],
                              [9, 0, 3, 0, 0, 0, 0, 0, 0],
                              [0, 2, 0, 0, 0, 0, 1, 0, 0]], dtype=np.int32)

# Battle Royale!
problem3_ChessRoyal = np.array([[6, 0, 0, 0, 1, 0, 0, 0, 8],
                                [0, 2, 0, 0, 5, 0, 0, 6, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [5, 7, 0, 0, 9, 0, 0, 3, 1],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 4, 0, 0, 3, 0, 0, 8, 0],
                                [2, 0, 0, 0, 7, 0, 0, 0, 4]], dtype=np.int32)

# Battle Royale - Odd Queens Even Kings
problem3_ChessRoyal02 = np.array([[0, 0, 0, 1, 2, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 4, 0, 0, 0],
                                  [0, 0, 0, 3, 0, 5, 0, 0, 0],
                                  [6, 7, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 9, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

problem3_ChessRoyal03 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 2, 0, 0, 0, 3, 0, 0],
                                  [0, 1, 0, 0, 5, 0, 0, 4, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 3, 0, 0, 0, 7, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 8, 0, 0, 1, 0, 0, 5, 0],
                                  [0, 0, 7, 0, 0, 0, 6, 0, 8],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)

# anti-knight - anti-king - nonConsec 
problem3_MySudoku01 = np.array([[0, 0, 0, 0, 7, 0, 0, 0, 0],
                                [0, 0, 0, 8, 0, 0, 0, 0, 0],
                                [0, 0, 9, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 0, 0, 0, 9, 0, 0],
                                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                                [0, 0, 0, 0, 2, 0, 0, 0, 0]], dtype=np.int32)

# anti-king diagonal sudoku
problem3_MySudoku02 = np.array([[3, 0, 2, 0, 6, 0, 1, 0, 9],
                                [0, 1, 0, 0, 0, 0, 0, 4, 0],
                                [4, 0, 0, 0, 0, 0, 0, 0, 7],
                                [0, 0, 0, 7, 0, 1, 0, 0, 0],
                                [1, 0, 0, 0, 0, 0, 0, 0, 2],
                                [0, 0, 0, 2, 0, 4, 0, 0, 0],
                                [5, 0, 0, 0, 0, 0, 0, 0, 3],
                                [0, 6, 0, 0, 0, 0, 0, 2, 0],
                                [7, 0, 1, 0, 4, 0, 5, 0, 8]], dtype=np.int32)

# tau-day - king sudoku
problem3_TauDayKing = np.array([[0, 0, 0, 6, 2, 8, 0, 0, 0],
                                [0, 0, 9, 0, 0, 0, 3, 0, 0],
                                [0, 6, 0, 0, 0, 0, 0, 1, 0],
                                [7, 0, 0, 0, 0, 0, 0, 0, 8],
                                [4, 0, 0, 0, 0, 0, 0, 0, 5],
                                [6, 0, 0, 0, 0, 0, 0, 0, 3],
                                [0, 8, 0, 0, 0, 0, 0, 9, 0],
                                [0, 0, 5, 0, 0, 0, 7, 0, 0],
                                [0, 0, 0, 9, 7, 1, 0, 0, 0]], dtype=np.int32)

# patto-patto by shye - CTC - sudoku with 36 digits
problem3_patto_shye = np.array([[0, 2, 3, 0, 6, 5, 0, 8, 9],
                                [9, 0, 0, 0, 0, 4, 0, 0, 5],
                                [5, 0, 0, 9, 0, 0, 0, 0, 0],
                                [6, 0, 0, 3, 0, 0, 0, 1, 8],
                                [3, 8, 0, 5, 9, 0, 0, 0, 2],
                                [0, 0, 0, 0, 8, 6, 3, 0, 0],
                                [2, 3, 0, 0, 0, 0, 0, 0, 6],
                                [8, 0, 7, 0, 2, 0, 0, 0, 3],
                                [0, 9, 6, 0, 5, 3, 8, 2, 0]], dtype=np.int32)

# Mirace Sudoku 2 - Ri Sa CTC 28th July 2020;
# Anti-knight, and Thermometers
problem3_RiSaMiracle2 = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 9, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)
# Thermometers for Ri Sa Miracle Sudoku 2
thermometer_RiSa = []
thermometer_RiSa01 = [(1, 4), (0, 3), (1, 2), (2, 3)]
thermometer_RiSa02 = [(2, 4), (1, 3)]
thermometer_RiSa03 = [(1, 6), (2, 5), (3, 4)]
thermometer_RiSa04 = [(2, 6), (3, 7), (4, 6), (3, 5)]
thermometer_RiSa05 = [(5, 6), (6, 7), (7, 6), (6, 5), (5, 4)]
thermometer_RiSa06 = [(6, 6), (7, 5), (6, 4), (5, 5)]
thermometer_RiSa.append(thermometer_RiSa01)
thermometer_RiSa.append(thermometer_RiSa02)
thermometer_RiSa.append(thermometer_RiSa03)
thermometer_RiSa.append(thermometer_RiSa04)
thermometer_RiSa.append(thermometer_RiSa05)
thermometer_RiSa.append(thermometer_RiSa06)

# Sandwich Sudoku by Cracking the Cryptic
problem3_Sandwich01 = np.array([[6, 1, 2, 9, 3, 8, 4, 7, 5],
                                [7, 8, 3, 0, 0, 0, 0, 0, 0],
                                [4, 5, 9, 0, 0, 0, 0, 0, 0],
                                [1, 3, 8, 6, 0, 0, 0, 0, 0],
                                [2, 7, 4, 0, 1, 0, 0, 0, 0],
                                [5, 9, 6, 0, 0, 2, 0, 0, 0],
                                [3, 4, 5, 0, 0, 0, 7, 0, 0],
                                [9, 2, 1, 0, 0, 0, 0, 0, 0],
                                [8, 6, 7, 0, 0, 0, 0, 0, 0]], dtype=np.int32)
problem3_Sandwich01_rowsums = np.array([2, 8, 26, 29, 0, 23, 15, 2, 4], dtype=np.int32)
problem3_Sandwich01_colsums = np.array([10, 23, 23, 23, 14, 12, 21, 0, 0], dtype=np.int32)

# Sandwich Sudoku 6x6
problem2x3_Sandwich02 = np.array([[1, 2, 3, 0, 0, 0],
                                  [5, 4, 6, 0, 0, 0],
                                  [3, 1, 5, 0, 0, 0],
                                  [4, 6, 2, 0, 0, 0],
                                  [6, 5, 1, 0, 0, 0],
                                  [2, 3, 4, 0, 0, 0],], dtype=np.int32)
problem2x3_Sandwich02_rowsums = np.array([10, 5, 5, 5, 5, 5], dtype=np.int32)
problem2x3_Sandwich02_colsums = np.array([12, 0, 7, 7, 7, 10], dtype=np.int32)


# Test-run - 16 x 16 Easy sudoku
problem4_test1 = np.array([[ 3, 14,  0, 10,  1,  0, 11,  0,  0,  0,  0,  0,  0,  4, 12,  0],
                           [ 0,  0,  9,  0,  4,  8,  0, 15,  2, 11, 12, 14, 16,  0,  0,  5],
                           [ 0,  0,  8, 11,  0,  0,  0, 16,  4, 10,  0, 15,  0, 13,  1,  0],
                           [ 0, 15,  0,  0,  2,  0,  5,  0,  0,  6,  1,  0, 14,  0,  0,  0],
                           [10,  0,  0,  9,  0,  1,  0, 12,  0,  0, 15,  6,  7,  0, 13,  0],
                           [12,  0, 16,  1,  0, 13, 14,  0,  5,  7,  0,  3,  0,  0, 15,  4],
                           [11,  0,  0, 15,  3, 16,  0,  0,  0,  0,  0,  2, 10,  0,  8,  0],
                           [ 0,  0,  2,  7,  0,  0, 15,  0,  0,  0, 11,  0,  0,  1,  0,  0],
                           [ 0,  0,  0,  0,  0,  0,  3,  1,  0,  0, 14, 12,  4,  0,  0,  8],
                           [ 0,  0, 10,  0, 14, 15,  0,  9,  0,  4,  0,  0,  1,  0,  7,  0],
                           [ 8,  5,  1,  0, 12,  0, 13,  0,  0,  0,  0,  0,  0, 10,  0,  0],
                           [ 0, 11,  3,  0,  0,  7,  0,  0,  0, 15,  6,  0,  0,  0,  0,  2],
                           [ 0,  0, 13,  3,  9, 11,  7,  5,  0,  0,  0,  0,  0, 16,  0,  0],
                           [ 0,  0, 14,  0, 16,  0,  8,  3,  0, 12,  7,  0, 13,  0,  0,  0],
                           [ 0,  6,  0,  0, 13,  0,  0,  0,  0, 16,  0,  1,  8,  0,  0,  0],
                           [ 0, 12, 11,  8,  0,  0,  0, 10,  9,  3,  2, 13,  0,  0,  4,  7]], dtype=np.int32)

# 6x6 sudoku Extreme
problem2x3_extreme01 = np.array([[ 0, 0, 5, 0, 0, 0],
                                 [ 0, 2, 0, 0, 0, 5],
                                 [ 0, 0, 1, 3, 0, 0],
                                 [ 4, 0, 0, 0, 1, 0],
                                 [ 0, 0, 0, 0, 0, 6],
                                 [ 0, 0, 2, 0, 4, 0]], dtype=np.int32)

# 6x6 sudoku diagonal
problem2x3_diagonal1 = np.array([[ 0, 0, 0, 3, 0, 0],
                                 [ 0, 0, 3, 0, 0, 0],
                                 [ 2, 0, 0, 0, 5, 0],
                                 [ 0, 3, 0, 0, 0, 1],
                                 [ 0, 0, 0, 6, 0, 0],
                                 [ 0, 0, 4, 0, 0, 0]], dtype=np.int32)

# 6x6 sudoku diagonal
problem3x2_diagonal1 = np.array([[ 0, 0, 0, 3, 4, 0],
                                 [ 0, 0, 2, 0, 0, 6],
                                 [ 0, 1, 0, 0, 0, 3],
                                 [ 1, 0, 0, 0, 6, 0],
                                 [ 3, 0, 0, 1, 0, 0],
                                 [ 0, 6, 5, 0, 0, 0]], dtype=np.int32)

# 6x6 sudoku Extreme - 2 x-wings
problem2x3_extreme02 = np.array([[ 0, 0, 0, 1, 0, 0],
                                 [ 0, 0, 2, 0, 0, 3],
                                 [ 4, 0, 0, 3, 0, 0],
                                 [ 0, 0, 3, 0, 0, 5],
                                 [ 3, 0, 0, 6, 0, 0],
                                 [ 0, 0, 1, 0, 0, 0]], dtype=np.int32)

# 4x4 sudoku Extreme - 
problem2x2_extreme01 = np.array([[ 0, 2, 0, 0],
                                 [ 0, 0, 2, 0],
                                 [ 0, 0, 0, 3],
                                 [ 4, 0, 0, 0]], dtype=np.int32)

problem2x3_extreme02_xwing = np.array([[ 5, 0, 0, 1, 0, 0],
                                       [ 1, 0, 2, 0, 0, 3],
                                       [ 4, 0, 5, 3, 0, 0],
                                       [ 0, 0, 3, 0, 0, 5],
                                       [ 3, 0, 0, 6, 0, 1],
                                       [ 0, 0, 1, 0, 0, 4]], dtype=np.int32)
# Special - 25 x 25 sudoku
problem25x25 = np.load("25x25_sudoku.npy")

# Special - 36 x 36 sudoku
problem36x36 = np.load("36x36_sudoku.npy")

# Special - 49 x 49 sudoku
problem49x49 = np.load("49x49_sudoku.npy")

# Special - 64 x 64 sudoku
problem64x64 = np.load("64x64_sudoku.npy")

# Special - 100 x 100 sudoku
problem100x100 = np.load("100x100_sudoku.npy")

# print(problem3_miracle1)

## Thermometer setups

# thermometer set for aad van der wetering tribute by sumanta mukherjee
thermometerSets = []
thermometer_set01 = [(i, 8-i) for i in range(1, 8)]
thermometerSets.append(thermometer_set01)

# sudoku grand prix 2020 4 thermometer puzzle
thermometerGP = []
thermometer_setGP01 = [(3, 0), (2, 1), (1, 2), (0, 3), (1, 4), (2, 5)]
thermometer_setGP02 = [(0, 5), (1, 6), (2, 7), (3, 8), (4, 7), (5, 6)]
thermometer_setGP03 = [(5, 8), (6, 7), (7, 6), (8, 5), (7, 4), (6, 3)]
thermometer_setGP04 = [(8, 3), (7, 2), (6, 1), (5, 0), (4, 1), (3, 2)]
thermometerGP.append(thermometer_setGP01)
thermometerGP.append(thermometer_setGP02)
thermometerGP.append(thermometer_setGP03)
thermometerGP.append(thermometer_setGP04)

# special 0 entry 9 bulb thermometer sudoku
thermometer_09 = []
thermometer_9bulb01 = [(3, 3), (4, 3)]
thermometer_9bulb02 = [(3, 0), (2, 0), (1, 0), (1, 1)]
thermometer_9bulb03 = [(1, 4), (1, 5), (1, 6), (1, 7)]
thermometer_9bulb04 = [(6, 4), (5, 4), (5, 5), (5, 6)]
thermometer_9bulb05 = [(1, 4), (0, 4), (0, 5), (0, 6), (0, 7)]
thermometer_9bulb06 = [(6, 1), (7, 1), (8, 1), (8, 2), (7, 2)]
thermometer_9bulb07 = [(6, 6), (6, 7), (6, 8), (7, 8), (7, 7)]
thermometer_9bulb08 = [(8, 8), (8, 7), (8, 6), (8, 5), (7, 5), (7, 6)]
thermometer_9bulb09 = [(3, 1), (3, 2), (2, 2), (1, 2), (0, 2), (0, 1)]
thermometer_09.append(thermometer_9bulb01)
thermometer_09.append(thermometer_9bulb02)
thermometer_09.append(thermometer_9bulb03)
thermometer_09.append(thermometer_9bulb04)
thermometer_09.append(thermometer_9bulb05)
thermometer_09.append(thermometer_9bulb06)
thermometer_09.append(thermometer_9bulb07)
thermometer_09.append(thermometer_9bulb08)
thermometer_09.append(thermometer_9bulb09)

# special 0 entry 11 bulb thermometer sudoku
thermometer_11 = []
thermometer_11bulb01 = [(0, 5), (1, 5)]
thermometer_11bulb02 = [(6, 2), (5, 2)]
thermometer_11bulb03 = [(7, 1), (7, 2)]
thermometer_11bulb04 = [(7, 8), (6, 8), (5, 8)]
thermometer_11bulb05 = [(7, 0), (6, 0), (5, 0), (5, 1)]
thermometer_11bulb06 = [(4, 4), (5, 4), (6, 4), (7, 4)]
thermometer_11bulb07 = [(4, 4), (4, 5), (4, 6), (4, 7), (4, 8)]
thermometer_11bulb08 = [(0, 6), (0, 7), (1, 7), (2, 7), (2, 6), (2, 5)]
thermometer_11bulb09 = [(3, 3), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1)]
thermometer_11bulb10 = [(7, 8), (8, 8), (8, 7), (8, 6), (8, 5), (8, 4)]
thermometer_11bulb11 = [(3, 3), (3, 2), (3, 1), (3, 0), (2, 0), (1, 0), (0, 0)]
thermometer_11.append(thermometer_11bulb01)
thermometer_11.append(thermometer_11bulb02)
thermometer_11.append(thermometer_11bulb03)
thermometer_11.append(thermometer_11bulb04)
thermometer_11.append(thermometer_11bulb05)
thermometer_11.append(thermometer_11bulb06)
thermometer_11.append(thermometer_11bulb07)
thermometer_11.append(thermometer_11bulb08)
thermometer_11.append(thermometer_11bulb09)
thermometer_11.append(thermometer_11bulb10)
thermometer_11.append(thermometer_11bulb11)

# Thermometer - Knight Sudoku
problem3_thermometerKnight = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 4, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 6, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int32)
thermometer_knight = []
thermometer_knightBulb04 = [(3, 0), (3, 1), (3, 2), (3, 3), (2, 3), (2, 4)]
thermometer_knightBulb03 = [(4, 1), (5, 1), (5, 2), (6, 2), (7, 2)]
thermometer_knightBulb02 = [(4, 7), (4, 6), (3, 6), (2, 6)]
thermometer_knightBulb01 = [(7, 6), (6, 6), (6, 7)]
thermometer_knight.append(thermometer_knightBulb01)
thermometer_knight.append(thermometer_knightBulb02)
thermometer_knight.append(thermometer_knightBulb03)
thermometer_knight.append(thermometer_knightBulb04)

## Magic Square Setups

magicSum_centre3X3 = []
magicSum_set01 = [ (3, 3), (3, 4), (3, 5),
                   (4, 3), (4, 4), (4, 5),
                   (5, 3), (5, 4), (5, 5) ]
magicSum_centre3X3.append(magicSum_set01)

magicSum_GridCentres = []
magicSum_set02 = [ (1, 1), (1, 4), (1, 7),
                   (4, 1), (4, 4), (4, 7),
                   (7, 1), (7, 4), (7, 7) ]
magicSum_GridCentres.append(magicSum_set02)

# Special sudoku - twin magic squares - odd diagonals
magicSum_special = []
magicSum_set03 = [ (0, 2), (1, 3), (2, 4), (1, 1), (2, 2), (3, 3), (2, 0), (3, 1), (4, 2) ]
magicSum_set04 = [ (4, 6), (5, 7), (6, 8), (5, 5), (6, 6), (7, 7), (6, 4), (7, 5), (8, 6) ]
magicSum_special.append(magicSum_set03)
magicSum_special.append(magicSum_set04)
